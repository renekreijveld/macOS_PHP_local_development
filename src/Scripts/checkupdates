#!/bin/bash

# checkupdates - checks for updates on local installed scripts and landingpage
#
# Written by René Kreijveld - email@renekreijveld.nl
# This script is free software; you may redistribute it and/or modify it.
# This script comes without any warranty. Use it at your own risk.
#
# Version history
# 1.0 Initial version
# 1.1 Added update option

# version
THISVERSION=1.1

# name of this
MYNAME=$(basename ${0})
# folder for phpdev configuration
CONFIG_DIR="${HOME}/.config/phpdev"
# path to the phpdev configuration file
CONFIG_FILE="${CONFIG_DIR}/config"

# Local scripts to update
LOCAL_SCRIPTS=(
    "adddb" 
    "addsite" 
    "checkupdates" 
    "deldb" 
    "delsite" 
    "restartapache" 
    "restartdev" 
    "restartdnsmasq" 
    "restartmailpit" 
    "restartmariadb" 
    "restartnginx" 
    "restartphpfpm" 
    "setrights" 
    "setserver" 
    "setsitephp" 
    "startapache" 
    "startdev" 
    "startdnsmasq" 
    "startmailpit" 
    "startmariadb" 
    "startnginx" 
    "startphpfpm" 
    "stopapache" 
    "stopdev" 
    "stopdnsmasq" 
    "stopmailpit" 
    "stopmariadb" 
    "stopnginx" 
    "stopphpfpm" 
    "xdebug"
)

# Joomla scripts to update
JOOMLA_SCRIPTS=(
    "jbackup" 
    "jbackupall" 
    "jdbdropall" 
    "jdbdump" 
    "jdbdumpall" 
    "jdbimp" 
    "jfunctions" 
    "jlistjoomlas" 
    "joomlainfo" 
    "latestjoomla"
)

LOCAL_SCRIPTS_DIR="/usr/local/bin"
REPO_BASE_URL="https://raw.githubusercontent.com/renekreijveld/macOS_PHP_local_development/main/src"

# show message function
showmessage() {
    if [ "${SILENT}" == "no" ]; then
        echo -e "$1"
    fi
}

# display usage information
usage() {
    echo -e "${MYNAME} ${THISVERSION}, written by René Kreijveld.\n"
    echo -e "\nUsage: ${MYNAME} [-u] [-i] [-h]\n"
    echo "-u show only updates."
    echo "-i install updates."
    echo -e "-h Help. Display this info.\n"
    exit 0
}

check_version() {
    local script="$1"
    local type="$2"
    local title="$3"
    local local_version repo_version script_path repo_url
    
    # Determine correct repo subfolder (Joomla_scripts or Scripts)
    if [[ "$type" == "script" ]]; then
        script_path="${LOCAL_SCRIPTS_DIR}/$script"
        repo_url="$REPO_BASE_URL/Scripts/$script"
        local_version=$(grep -E '^THISVERSION=' "${script_path}" | cut -d '=' -f2 | tr -d '"')
        repo_version=$(curl -s "${repo_url}" | grep -E '^THISVERSION=' | cut -d '=' -f2 | tr -d '"')
    elif [[ "$type" == "joomlascript" ]]; then
        script_path="${LOCAL_SCRIPTS_DIR}/$script"
        repo_url="$REPO_BASE_URL/Joomla_scripts/$script"
        local_version=$(grep -E '^THISVERSION=' "${script_path}" | cut -d '=' -f2 | tr -d '"')
        repo_version=$(curl -s "${repo_url}" | grep -E '^THISVERSION=' | cut -d '=' -f2 | tr -d '"')
    elif [[ "$type" == "index" ]]; then
        script_path="${ROOTFOLDER}/index.php"
        repo_url="$REPO_BASE_URL/Localhost/$script"
        local_version=$(grep "THISVERSION=" "${script_path}" | cut -d '=' -f2 | tr -d '"')
        repo_version=$(curl -s "${repo_url}" | grep "THISVERSION=" | cut -d '=' -f2 | tr -d '"')
    else
        return
    fi

    if [[ -n "$local_version" && -n "$repo_version" ]]; then
        if [[ "$local_version" != "$repo_version" ]] && [[ ${ONLYUPDATES} == "yes" ]]; then
            NRUPDATES=$((NRUPDATES + 1))
            echo -e "- update available for $script (installed: $local_version, latest: $repo_version)"
            if [ ${INSTALL} == "yes" ]; then
                install_update $script $script_path $repo_url
            fi
        else
            if [[ ${ONLYUPDATES} == "no" ]]; then
                echo "- $script is up to date (version: $local_version)"
            fi
        fi
    fi
}

install_update() {
    local script="$1"
    local path="$2"
    local url="$3"
    echo "Updating ${script}"
    curl -fsSL "${url}" | tee "script.${script}" > /dev/null
    if [ -f "$path" ]; then
        echo "${PASSWORD}" | sudo -S mv -f "${path}" "${path}.$(date +%Y%m%d-%H%M%S)" > /dev/null
    fi
    echo "${PASSWORD}" | sudo -S mv -f "script.${script}" "${path}" > /dev/null
    if [ ! "${script}" == "index.php" ]; then
        echo "${PASSWORD}" | sudo -S chmod +x "${path}" > /dev/null
    fi
}

check_scripts() {
    echo -e "\nChecking local scripts:"
    for script in "${LOCAL_SCRIPTS[@]}"; do
        check_version "${script}" "script" "regular scripts"
    done
}

check_joomla_scripts() {
    echo -e "\nChecking Joomla scripts:"
    for script in "${JOOMLA_SCRIPTS[@]}"; do
        check_version "${script}" "joomlascript" "Joomla scripts"
    done
}

check_landingpage() {
    echo -e "\nChecking Localhost landingpage:"
    check_version "index.php" "index" "local landingpage"
}

ONLYUPDATES="no"
INSTALL="no"
while getopts uih opt; do
    case "${opt}" in
    u)
        ONLYUPDATES="yes"
        ;;
    i)
        INSTALL="yes"
        ;;
    h)
        usage
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2;
        exit 1
        ;;
    esac
done

echo "${MYNAME} ${THISVERSION}"

# Load configuration file defaults
if [[ -f "${CONFIG_FILE}" ]]; then
    source "${CONFIG_FILE}"
else
    echo "Error: configuration file ${CONFIG_FILE} not found, exiting."
    exit 1
fi   

if [ ${INSTALL} == "yes" ]; then
    read -s -p "Input your password, this is needed to install the updates: " PASSWORD
fi

NRUPDATES=0
check_scripts
echo "${NRUPDATES} updates found."
NRUPDATES=0
check_joomla_scripts
echo "${NRUPDATES} updates found."
NRUPDATES=0
check_landingpage
echo "${NRUPDATES} updates found."
