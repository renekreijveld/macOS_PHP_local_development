#!/bin/bash

# jdbdumpall - Create a backup of all MariaDB databases
#
# Written by René Kreijveld - email@renekreijveld.nl
# This script is free software; you may redistribute it and/or modify it.
# This script comes without any warranty. Use it at your own risk.
#
# Version history
# 1.0 Initial version
# 1.1 Rewrote to backup all MariaDB databases, not only the Joomla databases.
# 1.2 Bugfix IF statements

# version
THISVERSION=1.2

# folder for phpdev configuration
CONFIG_DIR="${HOME}/.config/phpdev"
# path to the phpdev configuration file
CONFIG_FILE="${CONFIG_DIR}/config"

# Load configuration file defaults
if [[ -f "${CONFIG_FILE}" ]]; then
    source "${CONFIG_FILE}"
else
    echo "Error: configuration file ${CONFIG_FILE} not found, exiting."
    exit 1
fi   

# Get name of this script
MYNAME=$(basename "$0")

# check if folder for backup storage exists
if [ ! -d "${MARIADBBACKUP}" ]; then
    echo "Backup directory does not exist!"
    exit 1
fi

# display usage information
usage() {
    echo -e "${MYNAME} ${THISVERSION}, written by René Kreijveld.\n"
    echo -e "Usage: ${MYNAME} [-t] [-c] [-f] [-s] [-h]\n"
    echo "-t add timestamp to database dump."
    echo "-c compress database dump .sql file with gzip."
    echo "-f force: always overwrite existing backup files."
    echo "-s silent, do not display any messages to standard output."
    echo -e "-h help, display this info.\n"
    exit 0
}

# show message function
showmessage() {
    if [ "${SILENT}" == "no" ]; then
        echo -e "$1"
    fi
}

# Create a backup of a database
create_backup() {
    local dbname=$1

    BACKUPFILE="${MARIADBBACKUP}/${dbname}${NOW}.sql"

    # Set filename for output
    if [ "${COMPRESS}" == "yes" ] ; then
        OUTPUTFILE="${BACKUPFILE}.gz"
    else    
        OUTPUTFILE="${BACKUPFILE}"
    fi

    # If backup file already exists and we are not forcing, ask for confirmation
    if [ -f "${OUTPUTFILE}" ] && [ "${FORCE}" == "no" ]; then
        read -p "Backup for database ${dbname} already exists. Overwrite? (y/n): " confirm
        if [[ "${confirm}" != "y" ]]; then
            showmessage "Skipping backup for database ${dbname}"
            return
        fi
    fi

    # Create backup
    mariadb-dump --skip-opt --extended-insert=FALSE --add-drop-table --add-locks --create-options --disable-keys --lock-tables --quick --set-charset --user=root --password=${MARIADBPW} "${dbname}" > "${BACKUPFILE}"

    # If backup file was created, compress it if needed
    if [ -f "${BACKUPFILE}" ]; then
        if [ "${COMPRESS}" == "yes" ] ; then
            gzip ${BACKUPFILE}
            showmessage "Backup ready in file ${BACKUPFILE}.gz"
        else
            showmessage "Backup ready in file ${BACKUPFILE}"
        fi
    else
        echo "Error: backup failed for database ${DATABASE}"
    fi

}

# process the arguments
TIMESTAMP="no"
COMPRESS="no"
FORCE="no"
SILENT="no"
while getopts tcfsh opt; do
    case "${opt}" in
    t)
        TIMESTAMP="yes"
        ;;
    c)
        COMPRESS="yes"
        ;;
    f)
        FORCE="yes"
        ;;
    s)
        SILENT="yes"
        ;;
    h)
        usage
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    esac
done

showmessage "${MYNAME} ${THISVERSION}"

if [ ${TIMESTAMP} == "yes" ]; then
    NOW=$(date +".%Y%m%d-%H%M%S")
else
    NOW=""
fi  

# Get list of all existing databases
DBS=$(mariadb --user=root --password="${MARIADBPW}" -e"show databases" | tail -n +2)

# Process all databases
for DATABASE in ${DBS}; do
    case "${DATABASE}" in
        'information_schema'|'performance_schema'|'sys'|'mysql')
            ;;
        *)
            create_backup "${DATABASE}"
            ;;
    esac
done