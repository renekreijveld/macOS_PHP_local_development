#!/bin/bash

# jlistjoomlas -- Find Joomla instances on your Linux server.
# Supports Joomla versions 1.0 - 5.x
#
# Written by René Kreijveld - email@renekreijveld.nl
# This script is free software; you may redistribute it and/or modify it.
# This script comes without any warranty. Use it at your own risk.
#
# Version history:
# 1.7 Updated for Joomla 5
# 1.8 Code improvements and use of CONFIG_FILE

VERSION=1.8

MYPATH=$(cd "$(dirname "$0")"; pwd -P)
MYNAME=$(basename "$0")

# folder for phpdev configuration
CONFIG_DIR="${HOME}/.config/phpdev"
# path to the phpdev configuration file
CONFIG_FILE="${CONFIG_DIR}/config"

NOW=$(date +"%Y%m%d.%H%M%S")
CSV_FILE="joomla_sites.${NOW}.csv"

# show message function
showmessage() {
    echo -e "$1"
}

# Variables
SHORT="no"
CSV="no"
RELEASEVERSION=""

# Display usage information
usage() {
    echo -e "${MYNAME} ${VERSION}, written by René Kreijveld.\n"
    echo -e "Usage: ${MYNAME} [-s] [-h] [-r release]\n"
    echo "-s Short. Only display path and Joomla version."
    echo "-r Release version. Only display information about Joomla sites with given release version (e.g., 1.5, 2.5, 3.4)."
    echo -e "-h Help. Display this info.\n"
    exit 0
}

# Argument parsing
while getopts "shr:" opt; do
    case "${opt}" in
        s) SHORT="yes" ;;
        r) RELEASEVERSION="$OPTARG" ;;
        h) usage ;;
        *) usage ;;
    esac
done

showmessage "${MYNAME} ${VERSION}\n"

# Load configuration file defaults
if [[ -f "${CONFIG_FILE}" ]]; then
    source "${CONFIG_FILE}"
else
    echo "Error: configuration file ${CONFIG_FILE} not found, exiting."
    exit 1
fi   

# Check if jfunctions script exists
if [[ ! -f "${MYPATH}/jfunctions" ]]; then
    echo "Error: Required script 'jfunctions' not found in ${MYPATH}. Exiting."
    exit 1
fi

# Scan directories for Joomla instances
find "${ROOTFOLDER}" -maxdepth 2 -type d | while read -r DIR; do
    if [[ -f "${DIR}/configuration.php" ]]; then
        # Go to the directory where the site
        cd $DIR

        # Get Joomla information
        source "${MYPATH}/jfunctions"

        # Filter by release version if provided
        if [[ -n "${RELEASEVERSION}" && "${RELEASEVERSION}" != "${jversion}" ]]; then
            continue
        fi

        # Output information
        if [[ "${SHORT}" == "no" ]]; then
            printf "Sitename    : %s\n" "${sitenameclean}"
            printf "Version     : %s\n" "${jversion}"
            printf "DB Name     : %s\n" "${database}"
            printf "DB User     : %s\n" "${dbuser}"
            printf "DB Password : %s\n" "${password}"
            printf "DB Host     : %s\n" "${host}"
            printf "DB Prefix   : %s\n" "${prefix}"
            printf "Path        : %s\n" "$(pwd)"
            showmessage " "
        else
            showmessage "Version: ${jversion}\n"
        fi
    fi
done
