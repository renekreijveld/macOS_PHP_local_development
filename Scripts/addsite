#!/bin/bash

# addsite - add a new site to the local NginX configuration
#
# Written by René Kreijveld - email@renekreijveld.nl
# This script is free software; you may redistribute it and/or modify it.
# This script comes without any warranty. Use it at your own risk.
#
# Version history
# 1.0 Initial version
# 1.1 Added Joomla download option

# Variables 

# version
VERSION=1.1
# name of this
MYNAME=$(basename ${0})

# Start directory of homebrew
START_DIR=$(brew --prefix)

# default index.php template
INDEX_TEMPLATE=${START_DIR}/etc/nginx/templates/index.php
# nginx folder for website configurations
NGINX_CONF_DIR=${START_DIR}/etc/nginx/servers
# nginx configuration template
NGINX_CONFIG_TEMPLATE=${START_DIR}/etc/nginx/templates/template.conf
# apache etc dir
APACHE_DIR=${START_DIR}/etc/httpd
# apache folder for website configurations
APACHE_CONF_DIR=${APACHE_DIR}/vhosts
# apache configuration template
APACHE_CONFIG_TEMPLATE=${APACHE_DIR}/templates/template.conf
# folder for phpdev configuration
CONFIG_DIR="${HOME}/.config/phpdev"
# path to the phpdev configuration file
CONFIG_FILE="${CONFIG_DIR}/config"

# show message function
showmessage() {
    if [ "${SILENT}" == "no" ]; then
        echo -e "$1"
    fi
}

# display usage information
usage() {
    echo -e "${MYNAME} ${VERSION}, written by René Kreijveld.\n"
    echo -e "Usage: ${MYNAME} -n <website_name> -p <php_version> [-d <database_name>] [-j] [-o] [-s] [-h]\n"
    echo "-n the website name for the new website (without spaces)."
    echo "-p the PHP version for the new website."
    echo "-d the database name for the new website."
    echo "-j download and install the latest Joomla version."
    echo "-o open the new website in the browser after creation."
    echo "-s silent, no messages will be shown."
    echo -e "-h display this help.\n"
    exit 0
}

# Function to check if the site name contains spaces
contains_spaces() {
    if [[ "$1" =~ \  ]]; then
        return 0
    else
        return 1
    fi
}

# Function to check if PHP version is valid
is_valid_php_version() {
    PHP_VERSION=$1
    if [ -d "${START_DIR}/etc/php/${PHP_VERSION}" ]; then
        return 0
    else
        return 1
    fi
}

# Function to check if database exists
database_exists() {
    DATABASE_NAME=$1
    if mysql -u root -proot -e "use ${DATABASE_NAME}" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Parse command line arguments
SILENT="no"
OPEN="no"
JOOMLA="no"
while getopts "n:p:d:josh" opt; do
    case ${opt} in
    n)
        WEBSITE_NAME=$OPTARG
        ;;
    p)
        PHP_VERSION=$OPTARG
        ;;
    d)
        DATABASE_NAME=$OPTARG
        ;;
    j)
        JOOMLA="yes"
        ;;
    o)
        OPEN="yes"
        ;;
    s)
        SILENT="yes"
        ;;
    h)
        usage
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        usage
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        usage
        ;;
    esac
done

showmessage "${MYNAME} ${VERSION}"

# Load configuration file defaults
if [[ -f "${CONFIG_FILE}" ]]; then
    source "${CONFIG_FILE}"
else
    echo "Error: configuration file ${CONFIG_FILE} not found, exiting."
    exit 1
fi   

# check if mandatory parameters are provided
if [ -z "${WEBSITE_NAME}" ]; then
    echo "Error: website name missing."
    echo "Use ${MYNAME} -h to display help."
    exit 1
fi

# check if mandatory parameters are provided
if [ -z "${PHP_VERSION}" ]; then
    echo "Error: PHP version missing."
    echo "Use ${MYNAME} -h to display help."
    exit 1
fi

# check if the site name contains spaces
if contains_spaces "${WEBSITE_NAME}"; then
    echo "Error: Site name '$name' contains spaces."
    echo "Use ${MYNAME} -h to display help."
    exit 1
fi

# check if the PHP version is valid
if ! is_valid_php_version "${PHP_VERSION}"; then
    echo "Error: PHP version ${PHP_VERSION} is not installed."
    echo "Installed PHP versions are:"
    ls ${START_DIR}/etc/php
    exit 1
fi

# Check if the site folder already exists
SITE_FOLDER="${ROOTFOLDER}/${WEBSITE_NAME}"
if [ -d "${SITE_FOLDER}" ]; then
    echo "Error: The website folder '$site_folder' already exists."
    exit 1
fi

# check if the database name contains spaces
if contains_spaces "${DATABASE_NAME}"; then
    echo "Error: Database name '${DATABASE_NAME}' contains spaces. Please provide a name without spaces."
    exit 1
fi

# Check if the database already exists
if [ ! -z "${DATABASE_NAME}" ]; then
    if database_exists "${DATABASE_NAME}"; then
        echo "Error: The database '${DATABASE_NAME}' already exists."
        exit 1
    fi
fi

showmessage "Add new website ${WEBSITE_NAME} to the NginX configuration."

# Create the website directory
showmessage "Create website root folder ${SITE_FOLDER}."
mkdir -p ${SITE_FOLDER}

# Copy and modify the index.php website template
INDEX_PHP_FILE=${SITE_FOLDER}/index.php
showmessage "Installing index.php in root folder ${WEBSITE_NAME}."
cp ${INDEX_TEMPLATE} ${INDEX_PHP_FILE}
sed -i '' "s|<website_name>|${WEBSITE_NAME}|g" ${INDEX_PHP_FILE}
sed -i '' "s|<document_root>|${SITE_FOLDER}|g" ${INDEX_PHP_FILE}
sed -i '' "s|<database_name>|${DATABASE_NAME}|g" ${INDEX_PHP_FILE}
sed -i '' "s|<db_password>|${MARIADBPW}|g" ${INDEX_PHP_FILE}
sed -i '' "s|<php_version>|${PHP_VERSION}|g" ${INDEX_PHP_FILE}

# Set the php-fpm URL based on the PHP version
case ${PHP_VERSION} in
"7.4")
    PHP_FPM_URL="127.0.0.1:9074"
    ;;
"8.1")
    PHP_FPM_URL="127.0.0.1:9081"
    ;;
"8.2")
    PHP_FPM_URL="127.0.0.1:9082"
    ;;
"8.3")
    PHP_FPM_URL="127.0.0.1:9083"
    ;;
"8.4")
    PHP_FPM_URL="127.0.0.1:9084"
    ;;
esac

# Copy and modify the nginx configuration template
NGINX_CONF_FILE=${NGINX_CONF_DIR}/${WEBSITE_NAME}.conf
cp ${NGINX_CONFIG_TEMPLATE} ${NGINX_CONF_FILE}
chmod 700 ${NGINX_CONF_FILE}
sed -i '' "s|<document_root>|${SITE_FOLDER}|g" "${NGINX_CONF_FILE}"
sed -i '' "s|<website_name>|${WEBSITE_NAME}|g" "${NGINX_CONF_FILE}"
sed -i '' "s|<php_fpm_url>|${PHP_FPM_URL}|g" "${NGINX_CONF_FILE}"
sed -i '' "s|<start_dir>|${START_DIR}|g" "${NGINX_CONF_FILE}"

# Copy and modify the apache configuration template
APACHE_VHOSTS_FILE=${APACHE_DIR}/extra/httpd-vhosts.conf
APACHE_CONF_FILE=${APACHE_CONF_DIR}/${WEBSITE_NAME}.conf
cp ${APACHE_CONFIG_TEMPLATE} ${APACHE_CONF_FILE}
chmod 700 ${APACHE_CONF_FILE}
sed -i '' "s|<document_root>|${SITE_FOLDER}|g" "${APACHE_CONF_FILE}"
sed -i '' "s|<website_name>|${WEBSITE_NAME}|g" "${APACHE_CONF_FILE}"
sed -i '' "s|<php_fpm_url>|${PHP_FPM_URL}|g" "${APACHE_CONF_FILE}"
sed -i '' "s|<start_dir>|${START_DIR}|g" "${APACHE_CONF_FILE}"
echo "IncludeOptional ${APACHE_CONF_FILE}" >> ${APACHE_VHOSTS_FILE}

if [ ! -z "${DATABASE_NAME}" ]; then
    adddb -d ${DATABASE_NAME} -s
    showmessage "Database ${DATABASE_NAME} created."
fi

if [ "${WEBSERVER}" == "nginx" ]; then
    # Restart NginX
    showmessage "Restarting nginx."
    sudo brew services restart nginx
fi

if [ "${WEBSERVER}" == "apache" ]; then
    # Restart Apache
    showmessage "Restarting apache."
    brew services restart httpd
fi

if [ "${JOOMLA}" == "yes" ]; then
    showmessage "Downloading and extracting the latest Joomla version."
    cd ${SITE_FOLDER}
    latestjoomla
fi

if [ "${OPEN}" == "yes" ]; then
    open "https://${WEBSITE_NAME}.dev.test"
fi
