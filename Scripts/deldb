#!/bin/bash

# deldb - drop a MariaDB database
#
# Written by René Kreijveld - email@renekreijveld.nl
# This script is free software; you may redistribute it and/or modify it.
# This script comes without any warranty. Use it at your own risk.
#
# Version history
# 1.0 Initial version
# 1.1 Request confirmation before dropping the database

# Variables 
# version
VERSION=1.1
# name of this
MYNAME=$(basename ${0})
# folder for phpdev configuration
CONFIG_DIR="${HOME}/.config/phpdev"
# path to the phpdev configuration file
CONFIG_FILE="${CONFIG_DIR}/config"

# show message function
showmessage() {
    if [ "${SILENT}" == "no" ]; then
        echo -e "$1"
    fi
}

# display usage information
usage() {
    echo -e "${MYNAME} ${VERSION}, written by René Kreijveld.\n"
    echo -e "Usage: ${MYNAME} -d <database_name> [-f] [-s] [-h]\n"
    echo "-d the name of the database to delete."
    echo "-f force, do not ask confirmation before deleting the database."
    echo "-s silent, no messages will be shown."
    echo -e "-h display this help.\n"
    exit 0
}

# Function to check if database exists
database_exists() {
    DATABASE_NAME=$1
    if mariadb -u root -p${MARIADBPW} -e "use ${DATABASE_NAME}" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Parse command line arguments
SILENT="no"
FORCE="no"
while getopts "d:fsh" opt; do
    case ${opt} in
    d)
        DATABASE_NAME=$OPTARG
        ;;
    f)
        FORCE="yes"
        ;;
    s)
        SILENT="yes"
        ;;
    h)
        usage
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        usage
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        usage
        ;;
    esac
done

showmessage "${MYNAME} ${VERSION}"

# Load configuration file defaults
if [[ -f "${CONFIG_FILE}" ]]; then
    source "${CONFIG_FILE}"
else
    echo "Error: configuration file ${CONFIG_FILE} not found, exiting."
    exit 1
fi   

# check if mandatory parameters are provided
if [ -z "${DATABASE_NAME}" ]; then
    echo "Error: database name not provided."
    usage
fi

if ! database_exists "${DATABASE_NAME}"; then
    echo "Error: The database '${DATABASE_NAME}' does not exist."
    exit 1
fi

# Request confirmation
if [ "${FORCE}" == "no" ]; then
    read -p "Press Enter to delete database ${DATABASE_NAME} or press Ctrl-C to abort."
fi

showmessage "Dropping database ${DATABASE_NAME}."

# Drop the database
if mariadb -u root -p${MARIADBPW} -e "DROP DATABASE IF EXISTS \`${DATABASE_NAME}\`;"; then
    showmessage "Database ${DATABASE_NAME} dropped."
else
    echo "Error dropping database ${DATABASE_NAME}."
    echo "The command was: mariadb -u root -p${MARIADBPW} -e \"DROP DATABASE IF EXISTS \`${DATABASE_NAME}\`;\""
    exit 1
fi
