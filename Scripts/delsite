#!/bin/bash

# delsite - delete a new site to the local NginX configuration
#
# Written by René Kreijveld - email@renekreijveld.nl
# This script is free software; you may redistribute it and/or modify it.
# This script comes without any warranty. Use it at your own risk.
#
# Version history
# 1.0 Initial version
# 1.1 Request confirmation before deleting the website

# version
VERSION=1.1
# name of this
MYNAME=$(basename ${0})
# path where this script is located
MYPATH=$(cd $(dirname ${0}); pwd -P)
# nginx folder for website configurations
NGINX_CONF_DIR=/opt/homebrew/etc/nginx/servers
# apache etc dir
APACHE_DIR=/opt/homebrew/etc/httpd
# apache etc dir
APACHE_VHOSTS_CONF=${APACHE_DIR}/extra/httpd-vhosts.conf
# apache folder for website configurations
APACHE_CONF_DIR=${APACHE_DIR}/vhosts
# Websites root
SITE_ROOT="/Users/$USER/Development/Sites"
# folder for phpdev configuration
CONFIG_DIR="${HOME}/.config/phpdev"
# path to the phpdev configuration file
CONFIG_FILE="${CONFIG_DIR}/config"

# show message function
showmessage() {
    if [ "${SILENT}" == "no" ]; then
        echo -e "$1"
    fi
}

# display usage information
usage() {
    echo -e "${MYNAME} ${VERSION}, written by René Kreijveld.\n"
    echo -e "Usage: ${MYNAME} -n <name> [-d] [-f] [-s] [-h]\n"
    echo "-n the name for the website (without spaces)."
    echo "-d also drop the database."
    echo "-f force, do not ask confirmation before deleting website and database."
    echo "-s silent, no messages will be shown."
    echo -e "-h display this help.\n"
    exit 0
}

# Function to check if database exists
database_exists() {
    DATABASE_NAME=$1
    if mariadb -u root -proot -e "use ${DATABASE_NAME}" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Parse command line arguments
SILENT="no"
DBDELETE="no"
FORCE="no"
while getopts ":n:dfsh" opt; do
    case ${opt} in
    n)
        WEBSITE_NAME=$OPTARG
        ;;
    d)
        DBDELETE="yes"
        ;;
    f)
        FORCE="yes"
        ;;
    s)
        SILENT="yes"
        ;;
    h)
        usage
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        usage
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        usage
        ;;
    esac
done

showmessage "${MYNAME} ${VERSION}"

# Load configuration file defaults
if [[ -f "${CONFIG_FILE}" ]]; then
    source "${CONFIG_FILE}"
else
    echo "Error: configuration file ${CONFIG_FILE} not found, exiting."
    exit 1
fi   

# check if mandatory parameters are provided
if [ -z "${WEBSITE_NAME}" ]; then
    echo "Error: website name not provided."
    usage
fi

# Check if the site folder already exists
SITE_FOLDER="${ROOTFOLDER}/${WEBSITE_NAME}"
if [ ! -d "${SITE_FOLDER}" ]; then
    echo "Error: website folder '${SITE_FOLDER}' not found, exiting."
    exit 1
fi


# Request confirmation
# Request confirmation
if [ "${FORCE}" == "no" ]; then
    if [ "${DBDELETE}" == "yes" ]; then
        read -p "Press Enter to delete website '${WEBSITE_NAME}' and its database or press Ctrl-C to abort."
    else
        read -p "Press Enter to delete the website '${WEBSITE_NAME}' or press Ctrl-C to abort."
    fi
fi


# Get website information
cd ${SITE_FOLDER}
if [ "${DBDELETE}" == "yes" ]; then
    # include general functions
    if [ ! -e ${MYPATH}/jfunctions ]; then
        echo -e "Cannot continue: script jfunctions not found.\n"
        exit 1
    else
        # gather joomla information
        . ${MYPATH}/jfunctions
        # Drop the database
        showmessage "Dropping database ${database}."
        deldb -d ${database} -f -s
    fi
fi

# Delete website folder
cd ${ROOTFOLDER}
showmessage "Delete website folder."
rm -rf ${SITE_FOLDER}

# Delete the NginX configuration
NGINX_CONF_FILE=${NGINX_CONF_DIR}/${WEBSITE_NAME}.conf
rm -f ${NGINX_CONF_FILE}

# Delete the Apache configuration
APACHE_CONF_FILE=${APACHE_CONF_DIR}/${WEBSITE_NAME}.conf
rm -f ${APACHE_CONF_FILE}
DELTXT="IncludeOptional ${APACHE_CONF_FILE}"
sed -i '' "s|${DELTXT}||g" ${APACHE_VHOSTS_CONF}

if [ "${WEBSERVER}" == "nginx" ]; then
    # Restart NginX
    showmessage "Restarting nginx."
    sudo brew services restart nginx
fi

if [ "${WEBSERVER}" == "apache" ]; then
    # Restart Apache
    showmessage "Restarting apache."
    brew services restart httpd
fi
